// Приход клиента описывается образцом типа irregular_event,
// т.к. нам требуется описать событие с некоторой периодичностью


// Действие по обслуживанию клиента, описывается образцом типа operation,
// т.к. операция обслуживания имеет длительность и условие начала
$Pattern Образец_обслуживания_клиента : operation
$Relevant_resources
	// В качестве релевантного выбирается единственный ресурс модели (см. RSS),
	// который изменяется (Keep/Keep) и в начале и в конце образца
	_Парикмахерская: Парикмахерская Keep Keep
$Time = Длительность_обслуживания( 20, 40 ) // Продолжительность стрижки выбирается
                                            // в интервале от 20 до 40 минут
											// по равномерному закону, см. FUN
$Body
_Парикмахерская
	// Стрижка может начаться, если парикмахер свободен, а очередь не пуста
	Choice from _Парикмахерская.состояние_парикмахера == Свободен and _Парикмахерская.количество_в_очереди > 0
	Convert_begin
		// В начале действия клиент перемещается из очереди в кресло парикмахера, а...
		количество_в_очереди  = _Парикмахерская.количество_в_очереди - 1;
		// ...сам парикмахер переходит в состояние Занят
		состояние_парикмахера = Занят;
	// Между событиями начала и конца будет выдержана пауза, величиной в $Time
	Convert_end
		// После стрижки парикмахер становится свободным, и...
		состояние_парикмахера  = Свободен;
		// ...увеличивается счетчик обслуженных клиентов для сбора статистики
		количество_обслуженных = _Парикмахерская.количество_обслуженных + 1;
$End
